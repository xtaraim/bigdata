package sparkStreaming;

import java.util.List;
import java.util.regex.Pattern;

import org.apache.spark.SparkConf;
import org.apache.spark.api.java.JavaRDD;
import org.apache.spark.api.java.StorageLevels;
import org.apache.spark.api.java.function.Function;
import org.apache.spark.streaming.Durations;
import org.apache.spark.streaming.api.java.JavaDStream;
import org.apache.spark.streaming.api.java.JavaReceiverInputDStream;
import org.apache.spark.streaming.api.java.JavaStreamingContext;

import sparkSQL.Account;
import sparkSQL.DataService;
import sparkSQL.Transaction;

/**
 * Use DataFrames and SQL to analysis Credit Card Transaction Fraud in UTF8 encoded, '\n' delimited text
 * received from the network every second.
 *
 * Usage: CreditCardTransactionStreaming <hostname> <port> <hostname> and <port>
 * describe the TCP server that Spark Streaming transaction connect to receive
 * data.
 *
 * To run this on your local machine, you need to first run a Netcat server `$
 * nc -lk 9999` and then run the example `$ bin/run-example
 * Streamming.CreditCardTransactionStreaming localhost 9999`
 */
public final class CreditCardTransactionStreaming {
	private static final Pattern SPACE = Pattern.compile(",");

	public static void main(String[] args) throws Exception {
		if (args.length < 2) {
			System.err
					.println("Usage: CreditCardTransaction <hostname> <port>");
			System.exit(1);
		}

		// Create the context with a 1 second batch size
		SparkConf sparkConf = new SparkConf()
				.setAppName("CreditCardTransaction").setMaster("local[2]")
				.set("spark.executor.memory", "1g");
		
		@SuppressWarnings("resource")
		JavaStreamingContext ssc = new JavaStreamingContext(sparkConf,
				Durations.seconds(20));

		// Create a JavaReceiverInputDStream on target ip:port and count the
		// words in input stream of \n delimited text (eg. generated by 'nc')
		// Note that no duplication in storage level only for running locally.
		// Replication necessary in distributed scenario for fault tolerance.
		JavaReceiverInputDStream<String> lines = ssc.socketTextStream(args[0],
				Integer.parseInt(args[1]), StorageLevels.MEMORY_AND_DISK);

		JavaDStream<Transaction> transactions = lines
				.map(new Function<String, Transaction>() {
					private static final long serialVersionUID = 1L;

					@Override
					public Transaction call(String x) throws Exception {
						String[] splits = SPACE.split(x);
						if (splits.length < 6)
							return null;

						return new Transaction(Integer.parseInt(splits[0]),
								splits[1], splits[2], splits[3], Float.parseFloat(splits[4]), splits[5]);
					}
				});
		
		// Convert RDDs of the words DStream to DataFrame and run SQL query
		transactions.foreachRDD((rdd, time) -> {
			// Handle partitions empty
				if (rdd.partitions().isEmpty()) {
					return;
				}

				DataService instance = DataService.getInstance(rdd.context());
				// Get Account
				Account acc = instance.getAccount(rdd.first().getAccountNo());

				// Get List of most transaction
				List<Transaction> recentTrans = instance
						.getRecentTransactions(rdd.first().getAccountNo());

				Transaction currentTran = rdd.first();

				TransactionFraudDetection pc = new TransactionFraudDetection();
				String alert = pc.calcTotalPossibility(acc, currentTran,
						recentTrans);
				currentTran.setAlert(alert);
				JavaRDD<Transaction> updateAlerTrans = rdd.map(x -> {
					return currentTran;
				});
				// Insert transaction to Transaction table
				instance.insertNewTransaction(updateAlerTrans);
			});

		ssc.start();
		ssc.awaitTermination();
	}
}